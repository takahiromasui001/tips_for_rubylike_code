= Enumerableのメソッドで反復処理をRubyっぽくする
本章では反復処理をRubyっぽくする方法を解説する。
反復処理は大抵のプログラムで用いられる頻出の処理だ。
ここをRubyっぽくすることで、効率よくそれっぽいコードが書ける、と言う寸法だ。

まず結論から言うと、
極力Enumerableのメソッド(mapとかselectとか)を使おう！
と言うことになる。

これでさっと納得した人は、もうこの章は読む必要はない。
次の章に進んで欲しい。

何を言ってるか分からない、mapやselectは分かるがEnumerableって何よ？、
という人はこの章を読むことで得られる事があると思う。
是非続きを読んで欲しい。

== まずforは原則利用禁止
おそらくRubyの初学者が反復処理として一番最初に学ぶのがfor文だろう。
もしくは他の言語から来た人にとっては、for文は馴染みが深い反復処理だろう。

しかしRubyではfor文は原則利用禁止と思っておく方が良い。
少なくともfor文を使ったコードは、Rubyっぽさから最も遠い箇所に位置することになる。

前章で紹介した「Ruby Style Guide」においても、
for文は避けるように書かれている。

https://github.com/fortissimo1997/ruby-style-guide/blob/japanese/README.ja.md#no-for-loops
```
forは、どうしても使わなければいけない明確な理由が明言できる人以外は、使ってはいけません。 
```

=== Rubyにおける反復処理の考え方
なぜfor文を使う事が推奨されていないのか？
それはfor文がRubyにおける反復処理の考え方と相容れないから。

for文の考え方は、
「ある処理」を指定の回数繰り返す事

Rubyにおける反復処理の考え方は、
オブジェクトの各要素に、「ある処理」を適用する事

図で表すと図XXの形になる。

===　改めてfor文を見てみる
具体的にfor文のコードを用いて説明する。

図XXを見て欲しい。
for XXXで回数を指定した回数、
ブロックの中身を実行している。

「ある処理」を指定の回数繰り返す事
という書き方になっており、Rubyの考え方に合わない。

== each文を使う
まずforの代わりにeachを使うべき。

each文は以下の感じ

=== eachの弱点
ただ前述のRubyにおける反復処理の考え方
＝オブジェクトの各要素に、「ある処理」を適用する事
を考えると、eachでも不足している部分がある

実際に先ほどのコードを見てみる。
「オブジェクトに適用したい処理」はこれだけだが、
eachのコード上は他の処理も存在する。

他の処理＝処理の結果をどうまとめるか？
この処理は必要ない

「なんかうまく説明する」
「具体的な処理をループの中に記述する」、「C言語的な手続き型の発想に囚われたまま」
という感じ。

eachは「オブジェクト内の各要素に適用したい処理」と、「処理の結果をどうまとめるか？」が同じ抽象レベルで扱われている。
Ruby的にはイケてない。
「処理の結果をどうまとめるか？」はEnumerableのメソッドで隠蔽するんだ！

== Enumerableのメソッド
前節で説明した通り、eachを使うだけではでは
「オブジェクト内の各要素に適用したい処理」と「処理の結果をどうまとめるか？」を切り離す事ができない。

そこで登場するのがmapやselectに代表されるEnumerableモジュールのメソッド。
「オブジェクト内の各要素に適用したい処理」と「処理の結果をどうまとめるか？」の切り離しが、
簡潔なコードで実現できる。

=== Enumerableモジュールとは？

```
Enumerableモジュールは、配列やハッシュなど集合を表すクラスに数え上げや検索などのメソッドを提供します。

Enumerableモジュールのメソッドはすべて、オブジェクトのeachメソッドを呼び出します。
自作のクラスにEnumerableモジュールをインクルードするには、eachメソッドを実装する必要があります。
```

Enumerableメソッドは内部でeachメソッドを使っている。

=== Enumerableのメソッド
前述の通り、
本書ではEnumerableを、
「処理の結果をどうまとめるか？」毎に

mapを用いたenumerableの利用例

実際に図のeachをmapで書き直してみる

「処理の結果をどう扱うか」が、mapの中に組み込まれて隠蔽されている事がわかる

繰り返し処理の目的を抽象化している？

繰り返す処理とその目的

目的毎にEnumerableのメソッドを紹介する。

このような形で適切にメソッドを用いれば、
Rubyっぽいコードが実現できる？

=== Enumerableの様々なメソッド
(ここから読んで役に立つような書き方にしたいところ)
Enumerableを使うとRubyっぽいコードをかけるが、
「処理の結果をどう扱うか」を含んでいることから、1つ1つのメソッドは汎用性に欠ける。

そのため、目的に応じて適切なメソッドを使い分ける必要がある。

ここでは目的別に利用頻度のたかそうなEnumerableのメソッドを紹介する。
ひとまずここに書かれたものを使いこなせれば、
反復処理はかなりRubyっぽくなるはず。

==== map: 繰り返し処理の結果を配列にする
==== select: 繰り返し処理(条件式)の結果がtrueになる要素だけを配列にして返す
==== group_by: 繰り返し処理で指定した値を元に、ハッシュを作成する
グループ化のkeyとなる値の算出方法を渡している。

