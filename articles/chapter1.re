= はじめに
== この本のねらい
本書の目的は、効率良く「Rubyっぽい」コードを書くための情報を提供する事です。

「効率良く」は以下を含みます。

 * (比較的)簡単に適用できる
 * 利用頻度が高い
 * 再現性がある

== 想定読者
本書の想定読者は以下の通りです。

 * Rubyの基本文法等は理解して、ちょっとしたプログラムなら書ける方。
 * Rubyの開発者を目指して勉強中の方。
 * 他言語経験があり、最近Rubyを触り始めた方。

一言でいうと、Ruby入門者はひとまず超えて初級者に入った位の方です。
以降本書では対象読者を"Ruby初級者"と表現します。

== 本書で扱わないこと
本書ではRuby on Rails関連の知識は扱いません。あくまでRubyにフォーカスした内容となります。
ただRuby on Railsの環境でRubyのコードを書く、という状況を想定することはあります。

== 本書における「Rubyっぽい」の定義
本書では以下を2点を満たしたコードを「Rubyっぽい」コードとします。

 1. Ruby開発者にとって馴染みのある表現
 2. Rubyの持つ多様な機能を使いこなしている

これらを十分に実現するのはとても大変で、特にRuby初級者には現実的ではありません。
なので本書では成果が得られやすい(= 効率が良い)範囲で、上記2点を達成する方法を紹介します。

== 「Rubyっぽい」コードを書くメリット
前書きで少し触れましたが、「Rubyっぽい」コードを書けるようになると最終的にはプログラミング自体が楽しくなります。
ただそこに行き着くまでにも様々なメリットがあります。それらをまとめてここで紹介します。
(Ruby初級者目線の話になります)

=== 読む側が見やすいコードを書けるようになる
良く言われることではありますが、コードを書く際には可読性を意識するのがとても重要です。
自分が書いたコードというのは、プロジェクトが続く限り何らかの形でメンテされ続けます。
チーム開発であれば、書いた自分がコードに触れている時間より、他の人が読む時間が長くなります。
可読性が高いコードが書けるに越したことはありません。

「Rubyっぽい」コードは前述の通り、他のRuby開発者から見て馴染みのある＝読みやすいコードになります。
可読性という観点で有効であると言えるでしょう。

=== 周囲の評価が上がりメンタルを守れる(かも)
上の話と関連しますがあなたにも直接的なメリットがあります。
読みやすいコードを書く人は、恐らく周囲から良い評価を受けやすくなるはずです。
特にコードのレビューをしてくれる人達(会社の上司や先輩、コミュニティーやスクールのメンター等)からは良い印象を持たれるでしょう。
プルリクエストの指摘等も少しずつ減っていくはずです。

そしてこれは精神的な負荷の軽減に繋がります。
実務に入りたての駆け出しエンジニアは、慣れない環境や技術力の不足によってメンタルを削られるイベントに遭遇しやすいものです。
余りにも多くの指摘を受けて、お互い悪気はないのに雰囲気が悪くなる、そういった事は割と頻繁に起こり得ます。
「Rubyっぽい」コードを書ければ、コードに関して上司や先輩から細かい指摘を受けにくくなり、PRのやりとりも細かいものは減ってくるでしょう。
メンタルのケアは本当に重要です。そんな観点でも「Rubyっぽく」書くことは役に立つはずです。

=== 他のRuby開発者が書くコードを読めるようになる
「Rubyっぽい」コードが書ければ、読むこともできるはずです。

おそらくRuby初級者が読むコードは、自分より経験のあるRuby開発者が書いたものである事が多いのではないでしょうか？
(会社の上司先輩が書いたコードや、OSSとして公開されているものなど)
そういったコードは、Rubyで良く使われる表現が多く出てきたり、Rubyの様々な機能を使いこなしたものである事が多く、
雑に言えば「Rubyっぽい」コードである可能性が高いでしょう。
あなたが「Rubyっぽい」コードを書けるようになれば、そういった他の開発者のコードにおいてをみて、パッと理解できることが増えるでしょう。

=== プログラミング自体が楽しくなってくる
完全に主観ですが「Rubyっぽい」コードが書けるようになればプログラミング自体が楽しくなってきます。

プログラミング中には、目的とは直接関係無いが必要となるちょっとした処理、というのが割と出現します。
自分で作り込まないといけない場合は少し大変です。ライブラリで解決できることも多いですが、それはそれで面倒が増えたりもします。

Rubyはそういった「ちょっとした処理」が標準でたくさん入っています。
それらを上手く利用できれば、本来やるべきことに集中でき、心地よく楽しくプログラミングができるようになります。
またRuby自体がコードを簡潔に書くことを信条としている言語なので、
「ちょっとした処理」を利用することも含めて「Rubyっぽい」に近づければコードはシンプルで見た目が良いものになります。

つまり「Rubyっぽい」コードを書けば、本来自分が実現したいことに集中でき、かつコードもシンプルで見た目の良いものになるわけです。
その時あなたはこう思うでしょう。「こんな面倒な処理をシンプルに見栄えよくかけちゃう自分って凄くない？」こうなればプログラミングが楽しくないはずがありません。
(まぁ実際にはすごいのはRubyですけれども、それを使いこなしてるあなたもすごいんです。そう思っておきましょう)
