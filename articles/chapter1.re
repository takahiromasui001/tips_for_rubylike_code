＝ はじめに
== この本のねらい
本書はなるべくコスパ良く「Rubyっぽい」コードを書く方法を提供することを目的としています。

"コスパ良い"は以下を含みます。

簡単に適用できる
利用頻度が高い
再現性がある

== 想定読者
本書の想定読者は以下の通りです。

* Rubyの基本文法等は理解して、ちょっとしたプログラムなら書ける方。
* Rubyの開発者を目指して勉強中の方。
* 他言語経験があり、最近Rubyを触り始めた方。

一言でいうとRuby入門者はひとまず超えて、初級者に入った位の方です。

== 本書で扱わないこと
Ruby on Rails関連の知識
RubyといえばRuby on Railsみたいなところはありますが、本書では扱いません。
なるべくコスパ良くRails Wayに乗る方法
とかはいつかまとめるかもしれません。

== 本書における「Rubyっぽい」の定義
本書では以下を2点を満たしたコードを「Rubyっぽい」コードと位置付けることにします。

1. Ruby開発者にとって馴染みのある表現
2. Rubyの持つ多様な機能を使いこなしている

もちろんこれらを十分に実現するのはとても大変で、特にRuby初級者には現実的ではありません。

なので本書では楽に達成できて成果が得られやすい(= コスパが良い)範囲で紹介したいと考えています。

== 「Rubyっぽい」コードにするメリット
「Rubyっぽい」コードにするメリットは以下の通りです。
(Ruby初級者目線のメリットになります)

1.
レビューでの細かい指摘が減り、より重要なレビュー内容にフォーカスできる。
心理的な負担も減る

2.
先輩の書くコードを楽に読めるようになる

3.
(これから就職する人向け)
ポートフォリオにおける差別化要因になる。

4.
だんだん楽しくなってくる

== 結論
いきなり結論になりますが、以下を満たしたコードがパッと見Rubyっぽいと判断されるのかな？
と考えています。

- Ruby開発者にとって馴染みのある表現
- Rubyの持つ多様な機能を、適切な箇所で用いている
- なるべく簡潔な表現

それぞれかぶる部分も多いです。
例えば「Rubyの持つ多様な機能を、適切な箇所で用い」ていれば、
だいたいRuby開発者にとって馴染みがあるでしょうし、簡潔な表現にもなります。
なるべく簡潔な表現にできれば、
それは大抵Rubyの機能を用いているでしょうし、Ruby開発者に馴染みがあるでしょう。

3つの要素を足し合わせると「Rubyっぽい」になるのではなく、
「Rubyっぽい」を3つの別の観点で表現したようなイメージです。

以降上の結論に行き着いた経緯を挙げていきます。

== 結論に行き着いた根拠
=== 多様性は善

=== 他と似ていること

== まとめ
