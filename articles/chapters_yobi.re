= chapter2_yobi

以下のようなコードにRubocopを


Rubocop導入する際は
個人開発やポートフォリオ作成の環境で

チーム開発している環境で新しく


が、
Rubocopはあまりにも有名なので知ってる、既に使っているという人も多いかと思います。

なので以下をご自分の状況に照らし合わせて、当てはまる読み方をしていただければと思います。

1. RubocopをCIツール等と連携して利用している
(Rubocopの指摘を修正しないとプルリクエストやコミットが通らない環境)

2. Rubocopは使っているが、CIツール等との連携はしていない
(Rubocopの指摘を修正しなくてもプルリクエストやコミットを通せる)

3. Rubocopを使っていない＆自分だけの意思でRubocopを導入できる環境。
(ポートフォリオや個人開発のような自由にできる環境)

4. Rubocopを使っていない＆自分だけの意志ではRubocopを導入できない
(会社などでチーム開発を行う環境)


チームにはチームの方針があり、まずはそれを尊重するべきです。
Rubocopはあくまでただのツールです。
Rubocopはとても素晴らしいツールで、多くのRuby開発者が用いていると思いますが、絶対のものではありません。
チームにはチーム毎の方針があり、まずはそれを尊重すべきです。


チーム開発を行なっている環境でRubocopを使うなら、まずはチームのメンバーに相談しましょう。
チームとしての方針や何かしら利用していない理由があるはずです。

ただ本書の対象読者であるRuby初級者の方々は、
チーム全体に関わるような話に対して発言権があることはほぼ無いでしょう。


RubocopはGemなので、多くの場合Gemfileに追記する形でインストールすることになると思います。
ただチーム開発を行なっている場合(大抵の場合そうだと思いますが)、
自分の都合で勝手にGemを追加することは難しいでしょう。



Rubocopは自分一人でただ使うだけなら


- 本書におけるRubocop導入の目的は、自分のコードを「Rubyっぽい」に近づけることです。
- Rubocop本来の用途は、
仕事として行うプログラミングはチームで行うことがほとんどです。
チームのメンバ間で可能な範囲で書き方を統一し、コードの可読性を高めて生産性を上げよう、
というのが一般的な目的になります。
- ここで1つ問題になるのは、

- Rubocopのインストールは簡単。自分しかコードを書かない環境であれば運用も楽
- でもチーム単位全員が使うとなると注意が必要
- Rubocopの導入はコーディングのやり方に制限を設けることであり、

== Rubocopの導入

== 






最大公約数的な「Rubyっぽい」を目的とするなら





より正確に説明すると、RubocopはRuby Style Guideというコーディングスタイルをベースに作られています。


「Rubyっぽく」するための方法として最初に紹介するのは、コーディングスタイルへの準拠です。
よく知られたコーディングスタイルに準拠したコードを書くことで、
Ruby開発者にとって見慣れた、「Rubyっぽい」コードを書くことを目指します。

ただ最初に1つだけ注意事項があります。
本章では特定のコーディングスタイルへの準拠を勧めますが、
あくまでRuby開発経験が短い人が「Rubyっぽい」コードを書くための手段、
という位置付けです。

Rubyは多様な書き方が出来ることが魅力であり、
公式のコーディングスタイルといったものも存在しません。

慣れてきたら自分なりのコーディングスタイルを探してみるも良いと思います

== コーディングスタイルとは
まずそもそもコーディングスタイルに関してですが、
これは一言でいえばプログラムの書き方に関する約束事です。

簡単な例で言えば、空白の数や改行、変数の名前、適切な文法の使い方などが挙げられます。

仕事として行うプログラミングはチームで行うことがほとんどです。
チームのメンバ間で可能な範囲で書き方を統一し、コードの可読性を高めて生産性を上げよう、
というのが一般的な目的になります。

コーディングスタイルは言語毎に独自に存在しています。
それぞれの特徴は言語によって異なり、
公式に定められたものが存在したり、
いくつかの有力なものが鎬を削っていたり、
デファクトスタンダードが存在したりするようです。

例えばPythonやGolangには公式で定められたコーディングスタイルが存在し、
JavaScriptでは有名企業や有名フレームワークが提唱しているコーディングスタイルが複数存在しているようです。

== RubyにおけるコーディングスタイルとRubocop
Rubyにおいては公式のコーディングスタイルは存在していません。
その代わりにデファクトスタンダードとなるものが存在しています。

Ruby Style Guide
https://github.com/rubocop-hq/ruby-style-guide
がそれに当たります。

Rubocopが採用している(というか同じ作者の)コーディングスタイル、
というのがより分かりやすいかもしれません。

Rubocopとは静的コード解析ツールです。
このツールを使うことで、Ruby Style Guideへの準拠度合いがチェックできます。


RubyではRubocopというツールを用いて、
コーディングスタイルにどれだけ準拠しているかをチェックすることができます。

== Rubocopを使っていない方
- Rubocopの導入方法を簡単に解説



=== 自分の判断で導入できる方
- 早速導入しましょう
- Rubocopの導入方法

=== 自分の判断では導入できない方
- チーム開発をしている方で、Rubocopが導入されていない方
- まず相談してみる
- チームにはチームの文化がある
- ダメな場合は自分のコードだけでもRubocopにかける

== Rubocopを既に使っている方
=== CIに組み込まれていない方

=== CIに組み込まれている方


が導入された環境でコードを書いている方
- おそらく今の環境でコードを書き続けるだけで、少しずつ身についていく
- defaultのRubocopではカバーしてくれない内容について記載する


最初に紹介するのは、コーディングスタイル
コーディングスタイルはちょっとした書き方の決まりであり、取り入れるのは容易。
Rubyっぽさを出すための一番簡単な方法

== コーディングスタイルとは
コーディングスタイルとは。。。

大抵の言語にはコーディングスタイルが存在する。
が決して1つではない
例えば、、、
C言語では。。。

逆に中には言語が公式に認めているコーディングスタイルも存在する。

== Rubyにおけるコーディングスタイル
ではRubyはどうかというと公式のコーディングスタイルは存在しない。
しかし、最も有名なコーディングスタイルとして、
Ruby Style Guideがある。

採用しているかはともかく、
大抵のRuby開発者はこの存在を認識している。

そのためRuby Style Guideに沿ったコードを書けば、
「お、こいつは分かってるな」と思ってもらえるわけである

しかし、Ruby Style Guideに書かれた項目は全部で300を超える。
それらすべてを適用するのは全く現実的ではない。
(また実際のRuby開発者は、そんなことはしない)

そこで本章では、ruby-style-guideの中から独断と偏見で抽出した、
利用頻度の高く、簡単に適用できそうな項目を紹介する。

紹介する内容を全て取り入れる必要はありませんが、
少しでも取り入れることで、あなたのコードは「Rubyっぽさ」に近くはずだ。

== コーディングスタイル
=== 三項演算子?:
三項演算子は積極的に使う。その方が明らかに簡潔に書ける。

//emlist{ 
# Bad
if condition_1
  result_a
else
  result_b
end 

# Good
condition_1 ? result_a : result_b
//} 

ただし以下のような状況では、三項演算子ではなくif/elseを用いる。

==== ネストした三項演算子
三項演算子の中で、さらに三項演算子を使うような書き方はしない。
素直にif/elseを用いる

//emlist{ 
# Bad
condition_1 ? (condition_2 ? result_a1 : result_a2) : result_b

# Good
if condition_1
  condition_2 ? result_a1 : result_a2
else
  result_b
end
//}

==== 複数行にまたがる三項演算子?:
三項演算子は複数行に渡って記載することもできる。
(こんなコード見たことないが。。。)

この書き方は推奨されていない。素直にif/elseを使う。

//emlist{ 
result =
  test.nil? ? (
    a = 'nil'
    b = 'nil2'
  ) : (
    a = 'not nil'
    b = 'not nil2'
  )
//}

スタイルガイドに記載はされていないが、
以下のような書き方もできるがおそらく望ましくない。
//emlist{ 
result = test.nil? ? (a = 'nil'; b = 'nil2') : (a = 'not nil'; b = 'not nil2')
//}

基本的に三項演算子は、シンプルに書ける際に用いると可読性が良くていい感じ。

=== 条件文
==== if文の結果を変数に代入する
ifやcaseが式で値を返すので、結果を変数に代入できる。

//emlist{ 
# Bad
if condition_1
  result = process_a
else
  result = process_b
end

# Good
result = 
  if condition_1
    process_a
  else
    process_b
  end
//}

またこの場合、インデントは以下のどちらかに統一する。
//emlist{ 
# bad
result = if condition_1
  process_a
else
  process_b
end 

# good(A)
result = if condition_1
           process_a
         else
           process_b
         end 

# good(B)
result = 
  if condition_1
    process_a
  else
    process_b
  end
//}

==== 後置if(if修飾子)
本文が1行の場合は、後置if(if修飾子)を使う。
なお、以降のルールはunlessも同様。

//emlist{ 
# Bad
if condition_1
  process_a
end

# Good
process_a if condition_1

collection_1.each { |object| process_a } if condition_1
//}

特に以下の様な例で「ガード節」として用いると、
制御構文で条件式のネストを避けられ、簡潔なコードが書ける。

//emlist{ 
# Bad
def culculate_something(hash_a)
  if hash_a[:foo]
    process_a
    if hash_a[:bar]
      process_b
    else
      process_c
    end
  end
end

# Good
def culculate_something(hash_a)
  return unless hash_a[:foo]
  process_a
  return process_c unless hash_a[:bar]
  process_b
end
//}

ただし複数行に渡るブロックに後置if(if修飾子)を用いるのは避ける

//emlist{ 
# Bad
collection_1.map do
  process_a
  process_b
end if condition_1

# Good
if condition_1
  collection_1.map do
    process_a
    process_b
  end
end
//}

=== 否定条件
条件が否定形の場合は、ifでなくunlessを使う。
|| の利用も良い

//emlist{ 
# Bad
process_a if !condition_1

# Bad
process_a if not condition_1

# Good
process_a unless condition_1

# Good
condition_a || process_a
//}

ただし、unless + elseの形は避ける。if文を使って書き直すこと

//emlist{ 
# Bad
unless condition_1
  process_b
else
  process_a
end

# Good
if condition_1
  process_a
else
  process_b
end
//}

=== レイアウト
//emlist{ 

//}


その上でここからがスタイルガイドの内容になるが、




====
=== 構文

=== 命名

=== クラス
=== コレクション
=== 文字列
=== 雑則

= chapter3_yobi
=== for文を利用してはいけない理由
なぜfor文を使う事が推奨されていないのか？


それはfor文がRubyにおける繰り返し処理の考え方と相容れないからではないかと思っています。

for文の考え方は、
「ある処理」を指定の回数繰り返す事

Rubyにおける反復処理の考え方は、
オブジェクトの各要素に、「ある処理」を適用する事

図で表すと図XXの形になる。

===　改めてfor文を見てみる
具体的にfor文のコードを用いて説明する。

図XXを見て欲しい。
for XXXで回数を指定した回数、
ブロックの中身を実行している。

「ある処理」を指定の回数繰り返す事
という書き方になっており、Rubyの考え方に合わない。

== each文を使う
まずforの代わりにeachを使うべき。

each文は以下の感じ

= chapter4_yobi
「Rubyっぽい」コードを書くための基礎体力的な部分をつけようという狙いです。
意識していない日々のちょっとした判断の中で、
よりRubyっぽいコードの選択ができるようになるはずです。


Rubyの全体像(=言語仕様)の基本的な部分を理解することで、

実際に私も


Rubyの全体像を理解するための手段として、
本章ではRuby Sliverの取得をオススメする。


Rubocopを用いたコーディングスタイル＆利用頻度の高い組込ライブラリ...のような、
部分的ではあるが
効率よくRubyっぽいコードを書くことを目指してきた。

が運営されているRuby技術者の認定試験です

Rubyの普及と発展を目的として設立された一般財団法人
Ruby Associationが認定している


Ruby技術者認定試験は、プログラミング言語Rubyの普及活動に携わる非営利団体Ruby Associationによって運営されており、Rubyの開発者まつもとゆきひろ氏が理事長として就任されています。



理由は以下の通り。

* 再現性がある
* ゴールが明確
* 客観的

ただし以下の点に注意してほしい。

* Ruby実務経験半年以内
* 資格自体の価値はそう高くない
* 受験料が高い
* それなりに時間がかかる。(30,40h程度)
